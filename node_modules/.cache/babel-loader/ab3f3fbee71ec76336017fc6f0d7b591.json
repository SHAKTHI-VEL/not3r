{"ast":null,"code":"var _jsxFileName = \"/home/shakthivel/Desktop/inotebook/my-app/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport NoteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\" || \"http://192.168.1.103:3000\";\n  const notesInitial = [];\n  const [notes, setnotes] = useState(notesInitial);\n\n  const getNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setnotes(json);\n  }; // Add a note\n\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setnotes(notes.concat(note));\n  }; //   Edit note\n\n\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    }); //  const json= response.json(); \n\n    let newNotes = JSON.parse(JSON.stringify(notes));\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setnotes(newNotes);\n  }; // Delete note\n\n\n  const deleteNote = async id => {\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = response.json();\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setnotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"fGzX1LxqPhWNk3SVr8/3kKzw+Dw=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","useState","NoteState","props","host","notesInitial","notes","setnotes","getNote","title","description","tag","response","fetch","method","headers","localStorage","getItem","json","addNote","body","JSON","stringify","note","concat","editNote","id","newNotes","parse","index","length","element","_id","deleteNote","filter","children"],"sources":["/home/shakthivel/Desktop/inotebook/my-app/src/context/notes/NoteState.js"],"sourcesContent":["\nimport NoteContext from \"./noteContext\";\nimport { useState } from \"react\";\nconst NoteState=(props)=>{\n  const host=\"http://localhost:5000\" || \"http://192.168.1.103:3000\"\n  const notesInitial=[]\n  const [notes,setnotes]=useState(notesInitial)\n\n  const getNote=async (title,description,tag)=>{\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET', \n      \n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\":localStorage.getItem('token')\n      },\n    \n\n   });\n   const json=await response.json(); \n    \n     setnotes(json)\n  \n  }\n// Add a note\nconst addNote=async (title,description,tag)=>{\n  const response = await fetch(`${host}/api/notes/addnote`, {\n    method: 'POST', \n    \n    headers: {\n      'Content-Type': 'application/json',\n      \"auth-token\":localStorage.getItem('token')\n    },\n  \n    body: JSON.stringify({title,description,tag}) \n });\n const note=await response.json(); \n  \n   \nsetnotes(notes.concat(note))\n}\n//   Edit note\nconst editNote=async (id,title,description,tag)=>{\n\n\n\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT', \n      \n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\":localStorage.getItem('token')\n      },\n    \n      body: JSON.stringify({title,description,tag}) \n     \n   });\n  //  const json= response.json(); \n  \n  \n  let newNotes=JSON.parse(JSON.stringify(notes))\nfor (let index = 0; index < newNotes.length; index++) {\n  const element = newNotes[index];\n  if(element._id===id){\n    newNotes[index].title=title;\n    newNotes[index].description=description;\n    newNotes[index].tag=tag;\n   break;\n  }\n \n}\n\nsetnotes(newNotes)\n}\n// Delete note\nconst deleteNote=async (id)=>{\n  const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n    method: 'DELETE', \n    \n    headers: {\n      'Content-Type': 'application/json',\n      \"auth-token\":localStorage.getItem('token')\n    },\n  \n \n   \n });\n const json= response.json(); \n\n  \n\n  const newNotes=notes.filter((note)=>{return note._id!==id});\n  setnotes(newNotes)\n}\n\n \n    return(\n        <NoteContext.Provider value={{notes,addNote,deleteNote,editNote,getNote}}>\n        {props.children}\n        </NoteContext.Provider>\n    )\n}\n\nexport default NoteState"],"mappings":"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"},"metadata":{},"sourceType":"module"}